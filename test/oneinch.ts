import { expect } from 'chai';
import { ethers } from "hardhat";
import { BigNumberish, Contract, ContractFactory, EventFilter, Signer } from "ethers";
import { Fragment } from 'ethers/lib/utils';

describe("DSProxy", function () {

    let owner: Signer;
    let user: Signer;

    beforeEach(async function () {
        [owner, user] = await ethers.getSigners();
    });

    function getFunctions(contract: ContractFactory) {
        let cFunctions = {};
        let functionName = (frag: Fragment) => {
            if (frag.name == null) { return } return frag.name + "(" + frag.inputs.map(i => i.type) + ")";
        };

        contract.interface.fragments.forEach(frag => {
            let fn = functionName(frag);
            if (fn != null && fn != undefined) {
                cFunctions[fn] = frag;
            }
        });

        return cFunctions;
    }

    function getCalldata(contractFactory: ContractFactory, functionName: string, args: any[]): string {
        let functions: {} = getFunctions(contractFactory);
        if (functions[functionName] == undefined) {
            throw new Error('Invalid function: \"' + functionName + '\"');
        }
        let calldataString = contractFactory.interface.encodeFunctionData(functions[functionName], args);
        return calldataString;
    }
    /*
        it("Generate proxy, retrieve eth", async function () {
            const DSProxyFactory: ContractFactory = await ethers.getContractFactory("DSProxyFactory", owner);
            const DSProxy: ContractFactory = await ethers.getContractFactory("DSProxy");
            const MultiSwap: ContractFactory = await ethers.getContractFactory("MultiSwap");
            const ERC20: ContractFactory = await ethers.getContractFactory("ERC20");
    
            const dsProxyFactory: Contract = await DSProxyFactory.deploy();
            await dsProxyFactory.deployed();
    
            const dai: Contract = ERC20.attach("0x6b175474e89094c44da98b954eedeac495271d0f");
    
            const daiBalance = (addr: string) => {
                return dai.connect(user).balanceOf(addr);
            };
    
            // User creates proxy
            let calldataCreateProxy: string = getCalldata(DSProxyFactory, "build()", null);
            await user.sendTransaction({ to: dsProxyFactory.address, data: calldataCreateProxy });
    
            let filter: EventFilter = dsProxyFactory.filters.Created(await user.getAddress());
            let query = await dsProxyFactory.queryFilter(filter);
            let proxyAddress: string = query[0]["args"]["proxy"];
    
            const proxy = DSProxy.attach(proxyAddress);
            expect(await user.provider.getBalance(proxy.address)).to.equal(0);
    
            // owner transfers ether to proxy
            let transferValue: BigNumberish = ethers.utils.parseEther("1");
            let oneinchvalDAI: string = "0x90411a32000000000000000000000000e069cb01d06ba617bcdf789bf2ff0d5e5ca20c71000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000e069cb01d06ba617bcdf789bf2ff0d5e5ca20c7100000000000000000000000070997970C51812dc3A010C7d01b50e0d17dc79C80000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000041d25c47f4187d6a6e0000000000000000000000000000000000000000000000427c90ee2cdd4335340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000006e0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004d0e30db000000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000c3d03e4f041fd4cd388c549ee2a29a9e5075882f0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a4c9f12e9d000000000000000000000000c3d03e4f041fd4cd388c549ee2a29a9e5075882f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000003e069cb01d06ba617bcdf789bf2ff0d5e5ca20c71000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000002647f8fe7a000000000000000000000000000000000000000000000000000000000000000808000000000000000000000000000000000000000000000000000000000000044000000000000000000000000e069cb01d06ba617bcdf789bf2ff0d5e5ca20c7100000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a4059712240000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000001000000000000000000000000000000010000000000000000000000000000000000000000000000004547410750230a1700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004470bdb9470000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000427c90ee2cdd433534000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000184b3af37c0000000000000000000000000000000000000000000000000000000000000008080000000000000000000000000000000000000000000000000000000000000240000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000001000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044a9059cbb00000000000000000000000070997970C51812dc3A010C7d01b50e0d17dc79C800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    
            let bytecode: string = MultiSwap["bytecode"];
            let calldataMultiSwap: string = getCalldata(MultiSwap, "swapEth(bytes)", [oneinchvalDAI]);
    
            console.log("Dai balance of user: ", (await daiBalance(await user.getAddress())).toString());
    
            let calldataExecute = getCalldata(DSProxy, "execute(bytes,bytes)", [bytecode, calldataMultiSwap]);
            await user.sendTransaction({ to: proxy.address, data: calldataExecute, value: transferValue });
    
            console.log("Dai balance of user: ", (await daiBalance(await user.getAddress())).toString());      
        });*/

    it("Generate proxy, retrieve eth", async function () {
        const DSProxyFactory: ContractFactory = await ethers.getContractFactory("DSProxyFactory", owner);
        const DSProxy: ContractFactory = await ethers.getContractFactory("DSProxy");
        const MultiSwap: ContractFactory = await ethers.getContractFactory("MultiSwap");
        const ERC20: ContractFactory = await ethers.getContractFactory("ERC20");

        const dsProxyFactory: Contract = await DSProxyFactory.deploy();
        await dsProxyFactory.deployed();

        const dai: Contract = ERC20.attach("0x6b175474e89094c44da98b954eedeac495271d0f");
        const usdc: Contract = ERC20.attach("0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48");

        const tokenBalance = (token: Contract, addr: string) => {
            return token.connect(user).balanceOf(addr);
        }

        // User creates proxy
        let calldataCreateProxy: string = getCalldata(DSProxyFactory, "build()", null);
        await user.sendTransaction({ to: dsProxyFactory.address, data: calldataCreateProxy });

        let filter: EventFilter = dsProxyFactory.filters.Created(await user.getAddress());
        let query = await dsProxyFactory.queryFilter(filter);
        let proxyAddress: string = query[0]["args"]["proxy"];

        const proxy = DSProxy.attach(proxyAddress);
        expect(await user.provider.getBalance(proxy.address)).to.equal(0);

        // owner transfers ether to proxy
        let transferValue: BigNumberish = ethers.utils.parseEther("1");
        let oneinchvalDAI : string = "0x90411a32000000000000000000000000e069cb01d06ba617bcdf789bf2ff0d5e5ca20c71000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000e069cb01d06ba617bcdf789bf2ff0d5e5ca20c7100000000000000000000000070997970C51812dc3A010C7d01b50e0d17dc79C80000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000041d25c47f4187d6a6e0000000000000000000000000000000000000000000000427c90ee2cdd4335340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000006e0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004d0e30db000000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000c3d03e4f041fd4cd388c549ee2a29a9e5075882f0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a4c9f12e9d000000000000000000000000c3d03e4f041fd4cd388c549ee2a29a9e5075882f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000003e069cb01d06ba617bcdf789bf2ff0d5e5ca20c71000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000002647f8fe7a000000000000000000000000000000000000000000000000000000000000000808000000000000000000000000000000000000000000000000000000000000044000000000000000000000000e069cb01d06ba617bcdf789bf2ff0d5e5ca20c7100000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a4059712240000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000001000000000000000000000000000000010000000000000000000000000000000000000000000000004547410750230a1700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004470bdb9470000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000427c90ee2cdd433534000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000184b3af37c0000000000000000000000000000000000000000000000000000000000000008080000000000000000000000000000000000000000000000000000000000000240000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000001000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044a9059cbb00000000000000000000000070997970C51812dc3A010C7d01b50e0d17dc79C800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        let oneinchvalusdc: string = "0x90411a32000000000000000000000000e069cb01d06ba617bcdf789bf2ff0d5e5ca20c71000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000e069cb01d06ba617bcdf789bf2ff0d5e5ca20c7100000000000000000000000070997970C51812dc3A010C7d01b50e0d17dc79C80000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000049b01703000000000000000000000000000000000000000000000000000000004a6ea2edec872013f6b5fb443861090ad93154287812600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044f39b5b9b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000600474ea00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000002647f8fe7a000000000000000000000000000000000000000000000000000000000000000808000000000000000000000000000000000000000000000000000000000000044000000000000000000000000e069cb01d06ba617bcdf789bf2ff0d5e5ca20c7100000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a405971224000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000010000000000000000000000000000000100000000000000000000000000000000000000000000000000000000004ba0d100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004470bdb947000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000004a6ea2e2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000184b3af37c000000000000000000000000000000000000000000000000000000000000000808000000000000000000000000000000000000000000000000000000000000024000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000100000000000000000000000000000001000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044a9059cbb00000000000000000000000070997970C51812dc3A010C7d01b50e0d17dc79C800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        let bytecode: string = MultiSwap["bytecode"];
        let calldataMultiSwap: string = getCalldata(MultiSwap, "swapEthToMul(uint256[],bytes[])", [[transferValue, transferValue], [oneinchvalDAI, oneinchvalusdc]]);

        //console.log(calldataMultiSwap);

        console.log("Dai balance of user: ", (await tokenBalance(dai, await user.getAddress())).toString());
        console.log("USDC balance of user: ", (await tokenBalance(usdc, await user.getAddress())).toString());

        let calldataExecute = getCalldata(DSProxy, "execute(bytes,bytes)", [bytecode, calldataMultiSwap]);
        await user.sendTransaction({ to: proxy.address, data: calldataExecute, value: transferValue.add(transferValue) });

        console.log("Dai balance of user: ", (await tokenBalance(dai, await user.getAddress())).toString());
        console.log("USDC balance of user: ", (await tokenBalance(usdc, await user.getAddress())).toString());
    });

});